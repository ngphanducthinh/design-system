import fs from 'fs';
import path, { dirname } from 'path';
import { fileURLToPath } from 'url';

// Get the directory name of the current module
const __dirname = dirname(fileURLToPath(import.meta.url));

// Paths to the icon directories
const regularIconsDirectory = path.resolve(__dirname, '../../assets/icons/regular');
const brandIconsDirectory = path.resolve(__dirname, '../../assets/icons/brands');

// Path for the output enum file
const outputFile = path.resolve(__dirname, './BIconEnum.ts');

/**
 * Convert a filename to a valid enum name
 * - Remove .svg extension
 * - Convert kebab-case to PascalCase
 * - Handle special characters and numbers
 */
function toEnumName(filename: string): string {
  // Remove .svg extension
  const nameWithoutExtension = filename.replace('.svg', '');

  // Handle special cases for starting with numbers or special characters
  const validJsStart = /^[0-9\-\.]/;
  let enumName = nameWithoutExtension;

  // Convert kebab-case to PascalCase
  enumName = enumName
    .split('-')
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join('');

  // Ensure the enum name starts with a letter
  if (validJsStart.test(enumName.charAt(0))) {
    enumName = 'N' + enumName; // Using 'N' prefix for numeric/special characters only
  }

  return enumName;
}

// Generate enum entries from SVG files
async function generateEnumEntries(directory: string) {
  try {
    // Read all files from the directory
    const files = await fs.promises.readdir(directory);

    // Filter to only include SVG files
    const svgFiles = files.filter((file) => file.endsWith('.svg'));

    // Sort files for consistent output
    svgFiles.sort();

    // Generate enum entries
    return svgFiles.map((file) => {
      const enumName = toEnumName(file);
      return {
        enumName,
        fileName: file,
        iconName: file.replace('.svg', ''),
      };
    });
  } catch (error) {
    console.error(`Error reading files from ${directory}:`, error);
    return [];
  }
}

// Main function to generate the enums
async function generateIconEnums() {
  try {
    // Generate regular icon enum entries
    const regularEntries = await generateEnumEntries(regularIconsDirectory);

    // Generate brand icon enum entries
    const brandEntries = await generateEnumEntries(brandIconsDirectory);

    // Format regular icon enum entries
    const regularEnumContent = regularEntries
      .map((entry) => {
        return `  /** ${entry.fileName} */\n  ${entry.enumName} = "${entry.iconName}"`;
      })
      .join(',\n');

    // Format brand icon enum entries
    const brandEnumContent = brandEntries
      .map((entry) => {
        return `  /** ${entry.fileName} */\n  ${entry.enumName} = "${entry.iconName}"`;
      })
      .join(',\n');

    // Generate the enum file content with both enums
    const fileContent = `// THIS FILE IS AUTO-GENERATED BY BIconEnumGenerator.ts
// DO NOT EDIT MANUALLY

/**
 * Enum representing all available icons in the regular directory
 */
export enum BIconName {
${regularEnumContent}
}

/**
 * Enum representing all available brand icons
 */
export enum BIconBrandName {
${brandEnumContent}
}
`;

    // Write the enum file
    await fs.promises.writeFile(outputFile, fileContent);

    console.log(`Icon enum file generated at ${outputFile}`);
    console.log(`Generated ${regularEntries.length} regular icon entries`);
    console.log(`Generated ${brandEntries.length} brand icon entries`);
  } catch (error) {
    console.error('Error generating icon enums:', error);
  }
}

// Run the generator
generateIconEnums();
