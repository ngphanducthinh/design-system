name: 'Get & Cache Dependencies'
description: 'Get the dependencies (via NPM) using bun or npm command and cache them.'
inputs:
  npm:
    description: 'Use npm command to install dependencies'
    required: false
    default: 'false'
  caching:
    description: 'Whether to cache dependencies or not.'
    required: false
    default: 'true'
outputs:
  used-cache:
    description: 'Whether the cache was used.'
    value: ${{ steps.install.outputs.cache }}
runs:
  using: 'composite'
  steps:
    - name: Cache dependencies
      if: inputs.npm == 'true' && inputs.caching == 'true'
      id: cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

    - name: Cache dependencies
      if: inputs.npm == 'false' && inputs.caching == 'true'
      id: cache
      uses: actions/cache@v4
      with:
        path: node_modules
        key: deps-node-modules-${{ hashFiles('**/bun.lockb') }}

    - name: Install dependencies
      id: install
      if: inputs.npm == 'true' && (steps.cache.outputs.cache-hit != 'true' || inputs.caching != 'true')
      run: |
        npm ci
        echo "used-cache=${{ steps.cache.outputs.cache-hit == 'true' && inputs.caching == 'true' }}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Install dependencies
      id: install
      if: inputs.npm == 'false' && (steps.cache.outputs.cache-hit != 'true' || inputs.caching != 'true')
      run: |
        bun install --frozen-lockfile
        echo "used-cache=${{ steps.cache.outputs.cache-hit == 'true' && inputs.caching == 'true' }}" >> $GITHUB_OUTPUT
      shell: bash
